{"version":3,"sources":["context/AuthContext.js","hooks/http.js","components/Loader.js","components/LinksList.js","pages/LinksPage.js","pages/CreatePage.js","components/LinkCard.js","pages/DetailPage.js","hooks/message.js","pages/AuthPage.js","routes.js","components/Navbar.js","App.js","hooks/auth.js","serviceWorker.js","index.js"],"names":["noop","AuthContext","createContext","token","userId","login","logout","isAuthenticated","useHttp","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","JSON","stringify","fetch","response","json","data","ok","Error","message","clearError","Loader","style","display","justifyContent","paddingTop","className","LinksList","links","length","map","link","index","key","_id","from","to","LinksPage","useContext","setLinks","getLinks","Authorization","fetched","useEffect","CreatePage","history","useHistory","auth","setLink","event","push","window","M","updateTextFields","placeholder","id","type","onChange","e","target","value","onKeyPress","htmlFor","LinkCard","href","rel","clicks","Date","date","toLocaleDateString","DetailPage","linkId","useParams","getLink","useMessage","text","toast","html","AuthPage","email","password","form","setForm","changeHandler","name","marginRight","onClick","disabled","useRoutes","path","exact","Navbar","padding","preventDefault","App","setToken","ready","setReady","setUserId","jwtToken","localStorage","setItem","removeItem","parse","getItem","useAuth","routes","Provider","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","then","registration","unregister","console"],"mappings":"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","file":"static/js/main.12cae8a2.chunk.js","sourcesContent":["import {createContext} from \"react\";\n\nfunction noop() {}\n\nexport const AuthContext = createContext({\n    token: null,\n    userId: null,\n    login: noop,\n    logout: noop,\n    isAuthenticated: false\n})","import {useState, useCallback} from 'react'\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false)\n    const [error, setError] = useState(null)\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\n        setLoading(true)\n        try {\n          if (body) {\n              body = JSON.stringify(body)\n              headers['Content-Type'] = 'application/json'\n          }\n\n          const response = await fetch(url, {method, body, headers})\n          const data = await response.json()\n\n          if (!response.ok)\n              throw new Error(data.message || 'Something went wrong')\n\n          setLoading(false)\n\n          return data\n        } catch (e) {\n            setLoading(false)\n            setError(e.message)\n            throw e\n        }\n    }, [])\n\n    const clearError = useCallback(() => setError(null), [])\n\n    return { loading, request, error, clearError}\n}","import React from 'react'\n\nconst Loader = () => (\n    <div style={{ display: 'flex', justifyContent: 'center', paddingTop: '2rem' }}>\n        <div className=\"preloader-wrapper active\">\n            <div className=\"spinner-layer spinner-red-only\">\n                <div className=\"circle-clipper left\">\n                    <div className=\"circle\"/>\n                </div>\n                <div className=\"gap-patch\">\n                    <div className=\"circle\"/>\n                </div>\n                <div className=\"circle-clipper right\">\n                    <div className=\"circle\"/>\n                </div>\n            </div>\n        </div>\n    </div>\n\n);\n\nexport default Loader","import React from 'react'\nimport {Link} from \"react-router-dom\"\n\nconst LinksList = ({ links }) => {\n    if (!links.length)\n        return <p className='center'>Ссылок пока нет</p>\n\n    return (\n        <table>\n            <thead>\n            <tr>\n                <th>№</th>\n                <th>Оригинальная</th>\n                <th>Сокращенная</th>\n                <th>Открыть</th>\n            </tr>\n            </thead>\n\n            <tbody>\n            { links.map((link, index) => (\n                <tr key={link._id}>\n                    <td>{ ++index }</td>\n                    <td>{link.from}</td>\n                    <td>{link.to}</td>\n                    <td>\n                        <Link to={`/detail/${link._id}`}>Открыть</Link>\n                    </td>\n                </tr>\n            )\n            )}\n            </tbody>\n        </table>\n    )\n}\n\nexport default LinksList","import React, {useCallback, useContext, useEffect, useState} from 'react'\nimport {AuthContext} from \"../context/AuthContext\"\nimport {useHttp} from \"../hooks/http\"\nimport Loader from \"../components/Loader\"\nimport LinksList from \"../components/LinksList\"\n\nconst LinksPage = () => {\n    const {token} = useContext(AuthContext)\n    const { request, loading } = useHttp()\n    const [links, setLinks] = useState([])\n\n    const getLinks = useCallback(async () => {\n        try {\n            const fetched = await request(`/api/link`, 'GET', null, {\n                Authorization: `Bearer ${token}`\n            })\n            setLinks(fetched)\n        } catch (e) {}\n    }, [token, request])\n\n    useEffect(() => {\n        getLinks()\n    }, [getLinks])\n\n    if (loading)\n        return <Loader/>\n\n    return (\n        <>\n            <LinksList links={links} />\n        </>\n    )\n}\n\nexport default LinksPage","import React, {useContext, useEffect, useState} from 'react'\nimport {AuthContext} from \"../context/AuthContext\"\nimport { useHistory } from \"react-router-dom\"\nimport {useHttp} from \"../hooks/http\";\n\nconst CreatePage = () => {\n    const history = useHistory()\n    const auth = useContext(AuthContext)\n    const {request} = useHttp()\n    const [link, setLink] = useState('')\n\n    useEffect(() => {\n        window.M.updateTextFields()\n    }, [])\n\n    async function pressHandler(event) {\n        if (event.key === 'Enter') {\n            try {\n                const data = await request('/api/link/generate', 'POST', {from: link}, {\n                    Authorization: `Bearer ${auth.token}`\n                })\n                history.push(`/detail/${data.link._id}`)\n            } catch (e) {}\n        }\n    }\n\n    return (\n        <div className='row'>\n            <div className=\"col s8 offset-s2\" style={{ paddingTop: '2rem' }}>\n                <div className=\"input-field\">\n                    <input\n                        placeholder=\"Enter your link\"\n                        id=\"link\"\n                        type=\"text\"\n                        onChange={e => setLink(e.target.value)}\n                        onKeyPress={pressHandler}\n                    />\n                    <label htmlFor=\"link\">Your link</label>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CreatePage","import React from 'react'\n\nconst LinkCard = ({ link }) => (\n    <>\n        <h2>Ссылка</h2>\n\n        <p>Ваша ссылка: <a href={link.to} target='_blank' rel='noopener noreferrer'>{link.to}</a></p>\n        <p>Откуда: <a href={link.from} target='_blank' rel='noopener noreferrer'>{link.from}</a></p>\n        <p>Количество кликов по ссылке: <strong>{link.clicks}</strong></p>\n        <p>Дата создания: <strong>{new Date(link.date).toLocaleDateString()}</strong></p>\n    </>\n)\n\nexport default LinkCard","import React, {useCallback, useContext, useEffect, useState} from 'react'\nimport {useParams} from \"react-router-dom\"\nimport {useHttp} from \"../hooks/http\"\nimport {AuthContext} from \"../context/AuthContext\"\nimport Loader from \"../components/Loader\";\nimport LinkCard from \"../components/LinkCard\";\n\nconst DetailPage = () => {\n    const {token} = useContext(AuthContext)\n    const { request, loading } = useHttp()\n    const [link, setLink] = useState(null)\n    const linkId = useParams().id\n\n    const getLink = useCallback(async () => {\n        try {\n            const fetched = await request(`/api/link/${linkId}`, 'GET', null, {\n                Authorization: `Bearer ${token}`\n            })\n            setLink(fetched)\n        } catch (e) {}\n    }, [token, linkId, request])\n\n    useEffect(() => {\n        getLink()\n    }, [getLink])\n\n    if (loading)\n        return <Loader/>\n\n    return (\n        <>\n            { link && <LinkCard link={link} /> }\n        </>\n    )\n}\n\nexport default DetailPage;","import {useCallback} from 'react'\n\nconst useMessage = () => {\n    return useCallback(text => {\n        if (window.M && text)\n            window.M.toast({html: text})\n    }, [])\n}\n\nexport default useMessage","import React, {useContext, useEffect, useState} from 'react'\nimport {useHttp} from \"../hooks/http\"\nimport useMessage from \"../hooks/message\"\nimport {AuthContext} from \"../context/AuthContext\"\n\nconst AuthPage = () => {\n    const auth = useContext(AuthContext)\n    const message = useMessage()\n    const {loading, error, request, clearError} = useHttp()\n    const [form, setForm] = useState({\n        email: '',\n        password: ''\n    })\n\n    useEffect(() => {\n        message(error)\n        clearError()\n    }, [error, message, clearError])\n\n    useEffect(() => {\n        window.M.updateTextFields()\n    }, [])\n\n    function changeHandler(event) {\n        setForm({\n            ...form,\n            [event.target.name]: event.target.value\n        })\n    }\n\n    async function registerHandler() {\n        try {\n            const data = await request('/api/auth/register', 'POST', {...form})\n            message(data.message)\n        } catch (e) {}\n    }\n\n    async function loginHandler() {\n        try {\n            const data = await request('/api/auth/login', 'POST', {...form})\n            const { token, userId } = data\n            auth.login(token, userId)\n        } catch (e) {}\n    }\n\n    return (\n        <div className='row'>\n            <div className=\"col s6 offset-s3\">\n                <h1>Reduce a link</h1>\n                <div className=\"card blue darken-1\">\n                    <div className=\"card-content white-text\">\n                        <span className=\"card-title\">Авторизация</span>\n                        <div>\n                            <div className=\"input-field\">\n                                <input\n                                    placeholder=\"Enter your email address\"\n                                    id=\"email\"\n                                    type=\"text\"\n                                    name='email'\n                                    value={form.email}\n                                    className='yellow-input'\n                                    onChange={changeHandler}\n                                />\n                                    <label htmlFor=\"email\">E-mail</label>\n                            </div>\n                            <div className=\"input-field\">\n                                <input\n                                    placeholder=\"Enter your password\"\n                                    id=\"password\"\n                                    type=\"text\"\n                                    name='password'\n                                    value={form.password}\n                                    className='yellow-input'\n                                    onChange={changeHandler}\n                                />\n                                <label htmlFor=\"email\">Password</label>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"card-action\">\n                        <button\n                            className='btn yellow darken-4'\n                            style={{ marginRight: 10 }}\n                            onClick={loginHandler}\n                            disabled={loading}\n                        >\n                            Войти\n                        </button>\n                        <button\n                            className='btn grey lighten-1 black-text'\n                            onClick={registerHandler}\n                            disabled={loading}\n                        >\n                            Регистрация\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default AuthPage;","import React from 'react';\nimport {Switch, Route, Redirect} from \"react-router-dom\";\nimport LinksPage from \"./pages/LinksPage\";\nimport CreatePage from \"./pages/CreatePage\";\nimport DetailPage from \"./pages/DetailPage\";\nimport AuthPage from \"./pages/AuthPage\";\n\nconst useRoutes = (isAuthenticated) => {\n    if (isAuthenticated) {\n        return (\n            <Switch>\n                <Route path=\"/links\" exact>\n                    <LinksPage />\n                </Route>\n                <Route path=\"/create\" exact>\n                    <CreatePage />\n                </Route>\n                <Route path=\"/detail/:id\">\n                    <DetailPage />\n                </Route>\n                <Redirect to=\"/create\"/>\n            </Switch>\n        )\n    }\n    return (\n        <Switch>\n            <Route path=\"/\" exact>\n                <AuthPage />\n            </Route>\n            <Redirect to=\"/\"/>\n        </Switch>\n    )\n};\n\nexport default useRoutes;","import React, {useContext} from 'react'\nimport {NavLink, useHistory} from \"react-router-dom\"\nimport {AuthContext} from \"../context/AuthContext\";\n\nconst Navbar = () => {\n    const history = useHistory()\n    const auth = useContext(AuthContext)\n\n    function logoutHandler(event) {\n        event.preventDefault()\n        auth.logout()\n        history.push('/')\n    }\n\n    return (\n        <nav>\n            <div className=\"nav-wrapper blue darken-1\" style={{ padding: '0 2rem' }}>\n                <span className=\"brand-logo\">Сокращение ссылок</span>\n                <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\n                    <li><NavLink to='/create'>Создать</NavLink></li>\n                    <li><NavLink to='/links'>Ссылки</NavLink></li>\n                    <li><a href=\"/\" onClick={logoutHandler}>Выйти</a></li>\n                </ul>\n            </div>\n        </nav>\n    );\n};\n\nexport default Navbar;","import React from 'react'\nimport {BrowserRouter} from \"react-router-dom\"\nimport useRoutes from \"./routes\"\nimport {useAuth} from \"./hooks/auth\"\nimport {AuthContext} from \"./context/AuthContext\"\nimport Navbar from \"./components/Navbar\"\nimport Loader from \"./components/Loader\"\nimport 'materialize-css'\n\n\nfunction App() {\n    const {token, login, logout, userId, ready} = useAuth()\n    const isAuthenticated = !!token\n    const routes = useRoutes(isAuthenticated)\n\n    if (!ready)\n        return <Loader />\n\n      return (\n          <AuthContext.Provider value={\n              { token, login, logout, userId, isAuthenticated }\n          }>\n              <BrowserRouter>\n                  {isAuthenticated && <Navbar/>}\n                  <div className=\"container\">\n                      {routes}\n                  </div>\n              </BrowserRouter>\n          </AuthContext.Provider>\n      )\n}\n\nexport default App\n","import {useState, useCallback, useEffect} from 'react'\n\nconst storageName = 'userData'\n\nexport const useAuth = () => {\n    const [token, setToken] = useState(null)\n    const [ready, setReady] = useState(false)\n    const [userId, setUserId] = useState(null)\n\n    const login = useCallback((jwtToken, id) => {\n        setToken(jwtToken)\n        setUserId(id)\n\n        localStorage.setItem(storageName, JSON.stringify({ userId: id, token: jwtToken }))\n    }, [])\n\n    const logout = useCallback(() => {\n        setToken(null)\n        setUserId(null)\n        localStorage.removeItem(storageName)\n    }, [])\n\n    useEffect(() => {\n        const data = JSON.parse(localStorage.getItem(storageName))\n\n        if (data && data.token)\n            login(data.token, data.userId)\n\n        setReady(true)\n    }, [login])\n\n    return { login, logout, token, userId, ready }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}